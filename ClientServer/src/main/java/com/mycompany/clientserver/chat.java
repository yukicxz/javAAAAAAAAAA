/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.clientserver;

import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;

/**
 *
 * @author btwyu
 */
public class chat extends javax.swing.JFrame {
    private Socket socket;
    private DataOutputStream dos;
    private DataInputStream dis;
    private String username;
    private String currentRecipient = "ALL"; // –û–±—â–∏–π —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    private final Map<String, List<String>> chatHistory = new HashMap<>(); //–º–∞–ø–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    private final Map<Integer, File> clickableFiles = new HashMap<>(); //–º–∞–ø–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏

    /**
     * Creates new form chat
     */
  public chat(Socket socket, DataOutputStream dos, DataInputStream dis, String username){
        this.socket = socket;
        this.dos = dos;
        this.dis = dis;
        this.username = username;

        initComponents();
        setTitle("–ß–∞—Ç | –í—ã: ¬´" + username + "¬ª"); 
        setResizable(false);
        setupUserListSelection(); // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        startListening();
    }

    private void setupUserListSelection() {
        jUsers1.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                String selected = jUsers1.getSelectedValue();
                if (selected != null) {
                    currentRecipient = selected.equalsIgnoreCase("–û–±—â–∏–π —á–∞—Ç") ? "ALL" : selected;
                    // ------ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ ------
                    if ("ALL".equals(currentRecipient)) {
                        setTitle(username + " | –û–±—â–∏–π —á–∞—Ç"); 
                    } else {
                        setTitle(username + " | –ª–∏—á–Ω—ã–π —á–∞—Ç —Å ¬´" + currentRecipient + "¬ª"); 
                    }

                    // –û—á–∏—Å—Ç–∏–º –æ–∫–Ω–æ —á–∞—Ç–∞ —Å—Ä–∞–∑—É
                    SwingUtilities.invokeLater(() -> jChat.setText("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...\n"));

                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É —Å–µ—Ä–≤–µ—Ä–∞
                    try {
                        dos.writeUTF("GET_HISTORY " + currentRecipient);
                        dos.flush();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jMessage = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jChat = new javax.swing.JTextArea();
        jUserList = new javax.swing.JScrollPane();
        jUsers1 = new javax.swing.JList<>();
        jSend = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jFile = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(856, 503));
        setMinimumSize(new java.awt.Dimension(856, 503));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jMessage.setBackground(new java.awt.Color(102, 102, 102));
        jMessage.setColumns(20);
        jMessage.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMessage.setForeground(new java.awt.Color(255, 255, 255));
        jMessage.setRows(5);
        jScrollPane2.setViewportView(jMessage);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 530, 470, 50));

        jChat.setEditable(false);
        jChat.setBackground(new java.awt.Color(153, 153, 153));
        jChat.setColumns(20);
        jChat.setFont(jChat.getFont().deriveFont(jChat.getFont().getSize()+6f));
        jChat.setForeground(new java.awt.Color(255, 255, 255));
        jChat.setLineWrap(true);
        jChat.setRows(5);
        jChat.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jChatMouseMoved(evt);
            }
        });
        jChat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jChatMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jChat);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 13, 590, 510));

        jUsers1.setBackground(new java.awt.Color(102, 102, 102));
        jUsers1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jUsers1.setForeground(new java.awt.Color(255, 255, 255));
        jUserList.setViewportView(jUsers1);

        getContentPane().add(jUserList, new org.netbeans.lib.awtextra.AbsoluteConstraints(631, 44, 209, 530));

        jSend.setBackground(new java.awt.Color(102, 102, 102));
        jSend.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jSend.setForeground(new java.awt.Color(255, 255, 255));
        jSend.setText(">>>");
        jSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSendActionPerformed(evt);
            }
        });
        getContentPane().add(jSend, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 530, -1, 50));
        jSend.getAccessibleContext().setAccessibleName("jSend");

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(102, 102, 102));
        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setText("–°–ø–∏—Å–æ–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(631, 16, 209, -1));

        jFile.setBackground(java.awt.SystemColor.controlDkShadow);
        jFile.setFont(jFile.getFont().deriveFont(jFile.getFont().getStyle() & ~java.awt.Font.BOLD, 22));
        jFile.setForeground(new java.awt.Color(255, 255, 255));
        jFile.setText("üìé");
        jFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileActionPerformed(evt);
            }
        });
        getContentPane().add(jFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 530, 70, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/123.jpg"))); // NOI18N
        jLabel1.setLabelFor(this);
        jLabel1.setToolTipText("");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-490, 0, 1350, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSendActionPerformed
        // TODO add your handling code here:
        String message = jMessage.getText();
        if (!message.isEmpty()) {
            message = message.replace("\n", "\\n");
            try {
                dos.writeUTF(currentRecipient);
                dos.writeUTF(message);
                dos.writeUTF("---END---");
                dos.flush();
                jMessage.setText("");
            } catch (IOException ex) {
                ex.printStackTrace();
                jChat.append("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n");
            }
        }
    }//GEN-LAST:event_jSendActionPerformed

    private void sendFile(File file) {
        if (currentRecipient.equals("ALL")) {
            SwingUtilities.invokeLater(() -> jChat.append("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ –æ–±—â–∏–π —á–∞—Ç.\n"));
            return;
        }
        if (currentRecipient.equals(username)) {
            SwingUtilities.invokeLater(() -> jChat.append("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.\n"));
            return;
        }

        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            dos.writeUTF("FILE");
            dos.writeUTF(currentRecipient);
            dos.writeUTF(file.getName());
            dos.writeLong(file.length());
            dos.flush();

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
            try (FileInputStream fis = new FileInputStream(file)) {
                byte[] buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = fis.read(buffer)) != -1) {
                    dos.write(buffer, 0, bytesRead);
                }
                dos.flush();
            }

            SwingUtilities.invokeLater(() -> jChat.append("üì§ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + file.getName() + "\n"));
        } catch (IOException ex) {
            ex.printStackTrace();
            SwingUtilities.invokeLater(() -> jChat.append("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞\n"));
        }
    }

    private void jFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        sendFile(file);
    }
    }//GEN-LAST:event_jFileActionPerformed

    private void jChatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jChatMouseClicked
        // TODO add your handling code here:
                try {
            int clickedOffset = jChat.viewToModel2D(evt.getPoint());
            int clickedLine = jChat.getLineOfOffset(clickedOffset);

            File file = clickableFiles.get(clickedLine);
            if (file != null && file.exists()) {
                java.awt.Desktop.getDesktop().open(file);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jChatMouseClicked

    private void jChatMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jChatMouseMoved
        // TODO add your handling code here:
        try {
            int offset = jChat.viewToModel2D(evt.getPoint());
            int line = jChat.getLineOfOffset(offset);

            if (clickableFiles.containsKey(line)) {
                jChat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            } else {
                jChat.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            }
        } catch (Exception e) {
            jChat.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_jChatMouseMoved

    /**
     * @param args the command line arguments
     */
    private String wrapText(String text, int maxLineLength) {
    StringBuilder result = new StringBuilder();
    int lineLength = 0;

    for (String word : text.split(" ")) {
        if (lineLength + word.length() > maxLineLength) {
            result.append("\n");
            lineLength = 0;
        } else if (lineLength > 0) {
            result.append(" ");
            lineLength++;
        }
        result.append(word);
        lineLength += word.length();
    }

    return result.toString();
}
    private void playNotificationSound() {
    try {
        InputStream audioSrc = getClass().getResourceAsStream("/ding.wav");
        if (audioSrc == null) return;

        InputStream bufferedIn = new BufferedInputStream(audioSrc);
        AudioInputStream audioStream = AudioSystem.getAudioInputStream(bufferedIn);
        Clip clip = AudioSystem.getClip();
        clip.open(audioStream);
        clip.start();
    } catch (Exception e) {
        e.printStackTrace();
    }
}


    private void startListening() {
        new Thread(() -> {
            try {
                List<String> userList = new ArrayList<>();
                userList.add("–û–±—â–∏–π —á–∞—Ç");

                while (true) {
                    String line = dis.readUTF();

                    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   –ò –° –¢ –û –† –ò –Ø   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
                    if (line.equals("HISTORY")) {
                        List<String> history = new ArrayList<>();
                        while (!(line = dis.readUTF()).equals("---END---")) {
                            history.add(line);
                        }
                        chatHistory.put(currentRecipient, history);

                        SwingUtilities.invokeLater(() -> {
                            jChat.setText("");
                            for (String msg : history) {
                                // ‚ñ∏ –ø–æ–¥–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –Ω–∞ You:
                                String out = msg.contains(username + ":")
                                             ? msg.replaceFirst(Pattern.quote(username) + ":", "You:")
                                             : msg;

                                String wrapped = wrapText(out.replace("\\n", "\n"), 90);
                                jChat.append(wrapped + "\n");
                            }
                        });
                        continue;
                    }

                    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   –° –ü –ò –° –û –ö   ‚îÄ –ü –û –õ –¨ –ó. ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
                    if (line.startsWith("USERLIST")) {
                        userList.clear();
                        userList.add("–û–±—â–∏–π —á–∞—Ç");
                        while (!(line = dis.readUTF()).equals("---END---")) {
                            userList.add(line);
                        }
                        SwingUtilities.invokeLater(() -> {
                            jUsers1.setListData(userList.toArray(new String[0]));
                            jUsers1.setSelectedIndex(0);
                        });
                        continue;
                    }

                    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   –§ –ê –ô –õ –´   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
                    if (line.equals("FILE")) {
                        String sender   = dis.readUTF();
                        String filename = dis.readUTF();
                        long   fileSize = dis.readLong();

                        File downloadsFolder = new File(System.getProperty("user.home"), "Downloads");
                        if (!downloadsFolder.exists()) downloadsFolder.mkdirs();

                        /* –∞–≤—Ç–æ‚Äë–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ received_–ò–º—è(1).ext */
                        String base = filename, ext = "";
                        int dot = filename.lastIndexOf('.');
                        if (dot != -1) { base = filename.substring(0, dot); ext = filename.substring(dot); }

                        File received = new File(downloadsFolder, "received_" + filename);
                        for (int i = 1; received.exists(); i++)
                            received = new File(downloadsFolder, String.format("received_%s(%d)%s", base, i, ext));

                        try (FileOutputStream fos = new FileOutputStream(received)) {
                            byte[] buf = new byte[4096];
                            long left = fileSize;
                            while (left > 0) {
                                int read = dis.read(buf, 0, (int)Math.min(buf.length, left));
                                if (read == -1) throw new IOException("End of stream during file");
                                fos.write(buf, 0, read);
                                left -= read;
                            }
                        }

                        int lineNum = jChat.getLineCount();
                        clickableFiles.put(lineNum, received);

                        File f = received;         // effectively final –¥–ª—è –ª—è–º–±–¥—ã
                        SwingUtilities.invokeLater(() -> {
                            jChat.append("üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç " + sender + ": " + f.getName() +
                                         "\n[üîó] –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å [üîó]\n");
                            jChat.append("üìå –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤: " + f.getAbsolutePath() + "\n");
                            playNotificationSound();
                        });
                        continue;
                    }

                    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   –¢ –ï –ö –° –¢ –û –í –´ –ï   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
                    String msg = line;
                    String chatKey;
                    String displayMsg;

                    if (msg.startsWith("PM:")) {
                        String[] parts = msg.split(":", 3);
                        if (parts.length == 3) {
                            String otherUser = parts[1];
                            displayMsg = parts[2];
                            chatKey = otherUser;
                        } else {
                            displayMsg = msg;
                            chatKey = "ALL";
                        }
                    } else {
                        displayMsg = msg;
                        chatKey = "ALL";
                    }

                    /* ‚ñ∏ –ø–æ–¥–º–µ–Ω–∞ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ You: */
                    if (displayMsg.contains(username + ":")) {
                        displayMsg = displayMsg.replaceFirst(Pattern.quote(username) + ":", "You:");
                    }

                    /* –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ –ø–æ 90 —Å–∏–º–≤–æ–ª–æ–≤ */
                    displayMsg = wrapText(displayMsg.replace("\\n", "\n"), 90);

                    chatHistory.computeIfAbsent(chatKey, k -> new ArrayList<>()).add(displayMsg);

                    if (chatKey.equals(currentRecipient)) {
                        String out = displayMsg;
                        SwingUtilities.invokeLater(() -> {
                            jChat.append(out + "\n");
                            playNotificationSound();
                        });
                    }
                }
            } catch (IOException e) {
                SwingUtilities.invokeLater(() -> jChat.append("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ...\n"));
                e.printStackTrace();
            }

        }).start();
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea jChat;
    private javax.swing.JButton jFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextArea jMessage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jSend;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JScrollPane jUserList;
    private javax.swing.JList<String> jUsers1;
    // End of variables declaration//GEN-END:variables
}
