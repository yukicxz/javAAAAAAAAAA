/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.lab1;
import java.awt.Color;
import java.awt.Container;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.io.Reader;
import java.io.Writer;
import java.net.*;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Александра
 */
public class NewJFrame extends javax.swing.JFrame {
    /**
     * Creates new form NewJFrame
     */
    static Server server;
    DefaultTableModel model;
    LinkedList<RecIntegral> integralList;
    public static Map<Socket, ClientHandler> clients = new ConcurrentHashMap<>();
    public NewJFrame() {
        initComponents();
        model = (DefaultTableModel)jTable1.getModel();
        getContentPane().setBackground(new Color(71,167,106));
        integralList = new LinkedList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        fill_b = new javax.swing.JButton();
        clear_b = new javax.swing.JButton();
        save_txt_b1 = new javax.swing.JButton();
        up_json_b1 = new javax.swing.JButton();
        up_dv_b1 = new javax.swing.JButton();
        save_json_b1 = new javax.swing.JButton();
        up_txt_b2 = new javax.swing.JButton();
        save_dv_b2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 204));
        setForeground(new java.awt.Color(255, 204, 204));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Нижняя граница");

        jLabel2.setText("Верхняя граница");

        jLabel3.setText("Шаг");

        jButton1.setBackground(new java.awt.Color(102, 204, 255));
        jButton1.setText("Добавить");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 153, 153));
        jButton2.setText("Удалить");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 255, 204));
        jButton3.setText("Вычислить");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Нижняя граница", "Верхняя граница", "Шаг", "Результат"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel4.setText("f(x) = sin(x^2)");

        fill_b.setBackground(new java.awt.Color(153, 255, 153));
        fill_b.setText("Заполнить");
        fill_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fill_bActionPerformed(evt);
            }
        });

        clear_b.setBackground(new java.awt.Color(153, 255, 153));
        clear_b.setText("Очистить");
        clear_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_bActionPerformed(evt);
            }
        });

        save_txt_b1.setBackground(new java.awt.Color(153, 153, 255));
        save_txt_b1.setText("Сохранить в текстовый файл");
        save_txt_b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_txt_b1ActionPerformed(evt);
            }
        });

        up_json_b1.setBackground(new java.awt.Color(255, 204, 255));
        up_json_b1.setText("Загрузить из JSON файла");
        up_json_b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                up_json_b1ActionPerformed(evt);
            }
        });

        up_dv_b1.setBackground(new java.awt.Color(153, 153, 0));
        up_dv_b1.setText("Загрузить из двоичного файла");
        up_dv_b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                up_dv_b1ActionPerformed(evt);
            }
        });

        save_json_b1.setBackground(new java.awt.Color(255, 153, 255));
        save_json_b1.setText("Сохранить в JSON файл");
        save_json_b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_json_b1ActionPerformed(evt);
            }
        });

        up_txt_b2.setBackground(new java.awt.Color(204, 204, 255));
        up_txt_b2.setText("Загрузить из текстового файла");
        up_txt_b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                up_txt_b2ActionPerformed(evt);
            }
        });

        save_dv_b2.setBackground(new java.awt.Color(102, 102, 0));
        save_dv_b2.setText("Сохранить в двоичный файл");
        save_dv_b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_dv_b2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(save_json_b1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(save_txt_b1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                            .addComponent(jTextField2)
                                            .addComponent(jTextField3)))
                                    .addComponent(jLabel3))
                                .addGap(109, 109, 109)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(clear_b, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fill_b, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jButton3))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(up_dv_b1)
                                    .addComponent(save_dv_b2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(up_json_b1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(569, 569, 569)
                            .addComponent(up_txt_b2))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(up_txt_b2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(fill_b)
                    .addComponent(save_txt_b1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear_b)
                    .addComponent(up_dv_b1))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(save_dv_b2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(up_json_b1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(save_json_b1)
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    @Override
    public Container getContentPane() {
        return super.getContentPane(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if(selectedRow != -1){
            model.removeRow(selectedRow);
            integralList.remove(selectedRow);
        }
        else{
            JOptionPane.showMessageDialog(this, "Выберите строку для удаления!", "Ошибка", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            if(validateFields()){
            
                double lowerLimit = Double.parseDouble(jTextField1.getText());
                double upperLimit = Double.parseDouble(jTextField2.getText());
                double step = Double.parseDouble(jTextField3.getText());

                RecIntegral recIntegral = new RecIntegral(lowerLimit, upperLimit, step, 0.0);
                integralList.add(recIntegral);
                model.insertRow(jTable1.getRowCount(), new Object[]{
                lowerLimit,
                upperLimit,
                step
                });
                resetFields();
            }
        }
        catch(ValueException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Выберите строку для вычисления!", "Ошибка", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
//        double a = Double.parseDouble(model.getValueAt(selectedRow, 0).toString());
//        double b = Double.parseDouble(model.getValueAt(selectedRow, 1).toString());
//        double h = Double.parseDouble(model.getValueAt(selectedRow, 2).toString());

        RecIntegral task = integralList.get(selectedRow);
        System.out.println("clients connected: " + server.getClientsCount());
        if (clients.isEmpty()) {
            Thread calculating = new Thread(() -> {
                double result;
                try {
                    result = task.integrMultithreaded();
                } catch (InterruptedException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                model.setValueAt(task.getResult(), selectedRow, 3);
            });
            calculating.start();
            System.out.println("Calculate");
        } else {
            Thread calculating = new Thread(() -> {
                double result = server.distributeAndCompute(task);
                task.setResult(result);
                model.setValueAt(task.getResult(), selectedRow, 3);
            });
            calculating.start();
        }
        // Соединение с сервером
//        try (Socket socket = new Socket("localhost", 8080);
//             ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
//             ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {
//
//            // Отправляем задачу
//            out.writeObject(task);
//            out.flush();
//
//            // Получаем результат
//            RecIntegral resultTask = (RecIntegral) in.readObject();
//
//            // Обновляем GUI и список
//            model.setValueAt(resultTask.getResult(), selectedRow, 3);
//
//            // Обновляем в списке
//            integralList.set(selectedRow, resultTask);
//
//            JOptionPane.showMessageDialog(this, "Результат получен от сервера!", "Успех", JOptionPane.INFORMATION_MESSAGE);
//
//        } catch (IOException | ClassNotFoundException ex) {
//            JOptionPane.showMessageDialog(this, "Ошибка при соединении с сервером: " + ex.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
//        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Введены некорректные данные", "Ошибка", JOptionPane.ERROR_MESSAGE);
    }
//    } catch (ValueException e) {
//        JOptionPane.showMessageDialog(this, e.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
//    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void fill_bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fill_bActionPerformed
        // TODO add your handling code here:
        model.setRowCount(0);
        for (RecIntegral recIntegral : integralList){
            model.addRow(new Object[]{
                recIntegral.getLowerLimit(),
                recIntegral.getUpperLimit(),
                recIntegral.getStep(),
                recIntegral.getResult()
            });
        }
    }//GEN-LAST:event_fill_bActionPerformed

    private void clear_bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_bActionPerformed
        // TODO add your handling code here:
        model.setRowCount(0);
    }//GEN-LAST:event_clear_bActionPerformed

    private void save_txt_b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_txt_b1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Текстовые файлы (*.txt)", "txt");
        fileChooser.setFileFilter(filter);
        fileChooser.setAcceptAllFileFilterUsed(false); 
        int returnValue = fileChooser.showSaveDialog(jLabel1);
        if (returnValue == fileChooser.APPROVE_OPTION){
            File file = fileChooser.getSelectedFile();
                    // Добавляем расширение
        if (!file.getName().toLowerCase().endsWith(".txt")) {
            file = new File(file.getAbsolutePath() + ".txt");
        }
            try(BufferedWriter writer = new BufferedWriter(new FileWriter(file))){
                for (RecIntegral recIntegral : integralList){
                    writer.write(recIntegral.getLowerLimit() + "," + recIntegral.getUpperLimit() + "," + recIntegral.getStep() + "," + recIntegral.getResult() + "\n");
                }
                 JOptionPane.showMessageDialog(this, "Данные успешно сохранены!", "Сохранение", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Ошибка при сохранении файла", "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_save_txt_b1ActionPerformed

    private void up_json_b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_up_json_b1ActionPerformed
        // TODO add your handling code here:
         JFileChooser fileChooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("JSON файлы (*.json)", "json");
    fileChooser.setFileFilter(filter);

    int returnValue = fileChooser.showOpenDialog(this);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();

        Gson gson = new Gson();

        try (Reader reader = new FileReader(file)) {
            java.lang.reflect.Type listType = new TypeToken<LinkedList<RecIntegral>>() {}.getType();
            LinkedList<RecIntegral> loadedList = gson.fromJson(reader, listType);

            if (loadedList != null) {
                integralList = loadedList;
                model.setRowCount(0); // Очистка таблицы

                for (RecIntegral rec : integralList) {
                    model.addRow(new Object[]{
                        rec.getLowerLimit(),
                        rec.getUpperLimit(),
                        rec.getStep(),
                        rec.getResult()
                    });
                }

                JOptionPane.showMessageDialog(this, "Данные успешно загружены!", "Загрузка", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Ошибка: файл не содержит допустимых данных", "Ошибка", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Ошибка при загрузке файла: " + e.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_up_json_b1ActionPerformed

    private void up_dv_b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_up_dv_b1ActionPerformed
        // TODO add your handling code here:
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileFilter(new FileNameExtensionFilter("Binary Files (*.bin)", "bin"));

    int returnValue = fileChooser.showOpenDialog(this);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {
            Object obj = ois.readObject();

            if (obj instanceof LinkedList<?>) {
                LinkedList<?> list = (LinkedList<?>) obj;
                if (list.isEmpty() || list.get(0) instanceof RecIntegral) {
                    integralList = (LinkedList<RecIntegral>) list;
                    model.setRowCount(0); 
                    for (RecIntegral recIntegral : integralList) {
                        model.addRow(new Object[]{
                            recIntegral.getLowerLimit(),
                            recIntegral.getUpperLimit(),
                            recIntegral.getStep(),
                            recIntegral.getResult()
                        });
                    }
                    JOptionPane.showMessageDialog(this, "Данные успешно загружены!", "Загрузка", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    throw new ClassNotFoundException("Файл не содержит объектов типа RecIntegral");
                }
            } else {
                throw new ClassNotFoundException("Файл не содержит список");
            }
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Ошибка при загрузке файла: " + e.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_up_dv_b1ActionPerformed

    private void save_json_b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_json_b1ActionPerformed
        // TODO add your handling code here:
            JFileChooser fileChooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("JSON файлы (*.json)", "json");
    fileChooser.setFileFilter(filter);

    int returnValue = fileChooser.showSaveDialog(this);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        if (!file.getName().toLowerCase().endsWith(".json")) {
            file = new File(file.getAbsolutePath() + ".json");
        }

        Gson gson = new GsonBuilder().setPrettyPrinting().create();

        try (Writer writer = new FileWriter(file)) {
            gson.toJson(integralList, writer);
            JOptionPane.showMessageDialog(this, "Данные успешно сохранены!", "Сохранение", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Ошибка при сохранении файла: " + e.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_save_json_b1ActionPerformed

    private void up_txt_b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_up_txt_b2ActionPerformed
        // TODO add your handling code here:
                JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Текстовые файлы (*.txt)", "txt");
        fileChooser.setFileFilter(filter);
        fileChooser.setAcceptAllFileFilterUsed(false); // Отключаем выбор "Все файлы"
        
        int returnValue = fileChooser.showOpenDialog(jLabel1);
        if (returnValue == fileChooser.APPROVE_OPTION){
            File file = fileChooser.getSelectedFile();
            try(BufferedReader reader = new BufferedReader(new FileReader(file))){
                String line;
                model.setRowCount(0);
                integralList.clear();
                while ((line = reader.readLine()) != null){
                    String[] data = line.split(",");
                    double lowerLimit = Double.parseDouble(data[0]);
                    double upperLimit = Double.parseDouble(data[1]);
                    double step = Double.parseDouble(data[2]);
                    double result = Double.parseDouble(data[3]);
                    RecIntegral recIntegral = new RecIntegral(lowerLimit, upperLimit, step, result);
                    integralList.add(recIntegral);
                    model.addRow(new Object[]{lowerLimit, upperLimit, step, result});
                }
                JOptionPane.showMessageDialog(this, "Данные успешно загружены!", "Загрузка", JOptionPane.INFORMATION_MESSAGE);
            } catch(IOException e){
                JOptionPane.showMessageDialog(this, "Ошибка при загрузке из файла", "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
            catch (ValueException e){
                JOptionPane.showMessageDialog(this, "Неверные значения", "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_up_txt_b2ActionPerformed

    private void save_dv_b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_dv_b2ActionPerformed
        // TODO add your handling code here:
            JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileFilter(new FileNameExtensionFilter("Binary Files (*.bin)", "bin"));

    int returnValue = fileChooser.showSaveDialog(this);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        if (!file.getName().endsWith(".bin")) {
            file = new File(file.getAbsolutePath() + ".bin");
        }

        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {
            oos.writeObject(integralList); // Сериализация списка
            JOptionPane.showMessageDialog(this, "Данные успешно сохранены!", "Сохранение", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Ошибка при сохранении файла: " + e.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_save_dv_b2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        for (ClientHandler client : clients.values()) {
            client.sendExit();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new NewJFrame().setVisible(true);
//            }
//        });
        new NewJFrame().setVisible(true);
        server = new Server();
        // Запуск сервера
        try {
            server.StartServer();
        } catch (IOException ex) {
            return;
        }
        // Окно      
        
        
    }
    public boolean validateFields(){
        if(jTextField1.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(NewJFrame.this, "Введите значение!");
            jTextField1.grabFocus();
            return false;
        }
        if(jTextField2.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(NewJFrame.this, "Введите значение!");
            jTextField2.grabFocus();
            return false;
        }
        if(jTextField3.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(NewJFrame.this, "Введите значение!");
            jTextField3.grabFocus();
            return false;
        }
        return true;
    }
    public void resetFields(){
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear_b;
    private javax.swing.JButton fill_b;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton save_dv_b2;
    private javax.swing.JButton save_json_b1;
    private javax.swing.JButton save_txt_b1;
    private javax.swing.JButton up_dv_b1;
    private javax.swing.JButton up_json_b1;
    private javax.swing.JButton up_txt_b2;
    // End of variables declaration//GEN-END:variables
}